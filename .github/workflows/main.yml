---
name: CI

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]

env:
  FORCE_COLOR: "1"  # Make tools pretty.
  TOX_TESTENV_PASSENV: FORCE_COLOR
  PYTHON_LATEST: "3.10"


jobs:
  tests:
    name: "Python ${{ matrix.python-version }}"
    runs-on: "ubuntu-latest"
    env:
      USING_COVERAGE: "2.7,3.5,3.6,3.7,3.8"

    strategy:
      matrix:
        python-version: ["2.7", "3.5", "3.6", "3.7", "3.8", "3.9", "3.10", "3.11.0-beta - 3.11"]

    steps:
      - uses: "actions/checkout@v3"
      - uses: "actions/setup-python@v3"
        with:
          python-version: "${{ matrix.python-version }}"
      - name: "Install dependencies"
        run: |
          set -xe
          python -VV
          python -m site
          python -m pip install --upgrade pip setuptools wheel
          python -m pip install --upgrade coverage[toml] virtualenv tox tox-gh-actions

      - name: "Run tox targets for ${{ matrix.python-version }}"
        run: "python -m tox"

      - name: "Combine coverage"
        run: |
          set -xe
          python -m coverage combine
          python -m coverage xml --ignore-errors
        if: "contains(env.USING_COVERAGE, matrix.python-version)"

      - name: "Upload coverage to Codecov"
        if: "contains(env.USING_COVERAGE, matrix.python-version)"
        uses: "codecov/codecov-action@v3"
        with:
          fail_ci_if_error: true
          verbose: true

  package:
    name: "Build & verify package"
    runs-on: "ubuntu-latest"

    steps:
      - uses: "actions/checkout@v3"
      - uses: "actions/setup-python@v3"
        with:
          python-version: ${{env.PYTHON_LATEST}}

      - name: "Install build, check-wheel-content, and twine"
        run: "python -m pip install build twine check-wheel-contents"
      - name: "Build package"
        run: "python -m build --sdist --wheel ."
      - name: "List result"
        run: "ls -l dist"
      - name: "Check wheel contents"
        run: "check-wheel-contents dist/*.whl"
      - name: "Check long_description"
        run: "python -m twine check dist/*"

  install-dev:
    strategy:
      matrix:
        os: ["ubuntu-latest", "windows-latest", "macos-latest"]

    name: "Verify dev env"
    runs-on: "${{ matrix.os }}"

    steps:
      - uses: "actions/checkout@v3"
      - uses: "actions/setup-python@v3"
        with:
          python-version: ${{env.PYTHON_LATEST}}
      - name: "Install in dev mode"
        run: "python -m pip install -e .[dev]"
      - name: "Import package"
        run: "python -c 'import service_identity; print(service_identity.__version__)'"
